const connectDB = require('../config/db');

// Helper function to generate a sequential ticket ID
const generateTicketId = async () => {
  const pool = await connectDB();
  // Get the highest ticket number and increment by 1
  const [[{ maxId }]] = await pool.query(
    'SELECT COALESCE(MAX(CAST(SUBSTRING(ticket_id, 5) AS UNSIGNED)), 0) as maxId FROM tickets'
  );
  const nextId = maxId + 1;
  return `TKT-${nextId.toString().padStart(4, '0')}`;
};

// Create a new ticket
// Required: name, email, contact, query
exports.addTicket = async ({ name, email, contact, query }) => {
  const pool = await connectDB();
  
  try {
    // Insert the new ticket (ticket_id will be generated by the database trigger)
    const [result] = await pool.query(
      `INSERT INTO tickets (name, email, contact, query, status)
       VALUES (?, ?, ?, ?, 'open')`,
      [name, email, contact, query]
    );
    
    // Get the inserted ticket to return the generated ticket_id
    const [tickets] = await pool.query(
      'SELECT ticket_id FROM tickets WHERE id = ?',
      [result.insertId]
    );
    
    return { 
      id: result.insertId, 
      ticketId: tickets[0].ticket_id
    };
  } catch (error) {
    // Rollback in case of error
    await connection.rollback();
    throw error;
  } finally {
    // Always release the connection
    connection.release();
  }
};

// Get all tickets
exports.getTicket = async () => {
  const pool = await connectDB();
  const [tickets] = await pool.query(
    'SELECT * FROM tickets'
  );
  return tickets;
};

// Get a single ticket by ID
exports.getTicketById = async (ticketId) => {
  const pool = await connectDB();
  const [tickets] = await pool.query(
    'SELECT * FROM tickets WHERE ticket_id = ?',
    [ticketId]
  );
  return tickets[0] || null;
};

// Update ticket status
exports.updateTicketStatus = async (ticketId, status) => {
  const pool = await connectDB();
  const [result] = await pool.query(
    'UPDATE tickets SET status = ?, updated_at = NOW() WHERE ticket_id = ?',
    [status, ticketId]
  );
  return result.affectedRows > 0;
};

// Delete a ticket
exports.deleteTicket = async (ticketId) => {
  const pool = await connectDB();
  const [result] = await pool.query(
    'DELETE FROM tickets WHERE ticket_id = ?',
    [ticketId]
  );
  return result.affectedRows > 0;
};

// Get tickets by status
exports.getTicketsByStatus = async (status) => {
  const pool = await connectDB();
  const [tickets] = await pool.query(
    'SELECT * FROM tickets WHERE status = ? ORDER BY created_at DESC',
    [status]
  );
  return tickets;
};